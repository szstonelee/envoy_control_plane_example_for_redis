admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
dynamic_resources:
  cds_config:
    api_config_source:
      api_type: GRPC
      grpc_services:
      - envoy_grpc:
          cluster_name: xds_cluster
  eds_config:
    api_config_source:
      api_type: GRPC
      grpc_services:
        envoy_grpc:
          cluster_name: xds_cluster

node:
  cluster: default-cluster
  id: default-instance
  metadata:
    foo: bar
    foo2: bar2

static_resources:
  listeners:
  - name: listener_http1
    address:
      socket_address: { address: 0.0.0.0, port_value: 3000 }
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          access_log:
          - name: envoy.file_access_log
            config:
              path: "/dev/stdout"
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: HTTP1
          rds:
            "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.Rds
            route_config_name: generic_route
            config_source:
              api_config_source:
                api_type: GRPC
                grpc_services:
                - envoy_grpc:
                    cluster_name: xds_cluster
          http_filters:
            - name: envoy.router
  clusters:
  - name: xds_cluster
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    upstream_connection_options:
      # configure a TCP keep-alive to detect and reconnect to the admin
      # controller in the event of a TCP socket half open connection
      tcp_keepalive: {}
    load_assignment:
      cluster_name: xds_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: control-plane
                port_value: 5678
